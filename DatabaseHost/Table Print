import pandas as pd
from sqlalchemy import create_engine
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem
import numpy as np  # Import numpy to check for numeric values
from SearchDB import searchPatientWithName
import SearchDB
import EncryptionKey

# Replace with your PostgreSQL database credentials
DB_USERNAME = "postgres"
DB_PASSWORD = "49910"
DB_HOST = "localhost"  # Or the server address
DB_PORT = "5432"  # Default PostgreSQL port
DB_NAME = "huntsvillehospital"

# Create the database connection
engine = create_engine(f"postgresql+psycopg2://{DB_USERNAME}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}")

# Write your SQL query
query = "SELECT * FROM patient"

# Read data into a Pandas DataFrame
df = pd.read_sql(query, engine)

class DataFrameGUI(QMainWindow):
    def __init__(self, df):
        super().__init__()

        self.setWindowTitle("Pandas DataFrame in PyQt5 GUI")
        self.setGeometry(100, 100, 600, 400)  # Window size

        self.table_widget = QTableWidget()
        self.setCentralWidget(self.table_widget)

        self.load_data(df)

    def load_data(self, df):
        self.table_widget.setRowCount(df.shape[0])  # Set row count
        self.table_widget.setColumnCount(df.shape[1])  # Set column count
        self.table_widget.setHorizontalHeaderLabels(df.columns)  # Set column names

        # Populate the table with data
        for row in range(df.shape[0]):
            for col in range(df.shape[1]):
                item = QTableWidgetItem(str(df.iat[row, col]))
                self.table_widget.setItem(row, col, item)

    def decode_value(value):
        """
        Decodes and decrypts database values.
        Handles memoryview, bytes, encryption, and removes unreadable symbols.
        """
        # Check If the value is numeric (int64, float64), return it as a string immediately
        if isinstance(value, (int, float, np.integer, np.floating)):
            return str(value)

        # Check Handle memoryview (common for BYTEA in PostgreSQL)
        if isinstance(value, memoryview):
            value = value.tobytes()  # Convert memoryview to bytes

        # Check Handle bytes
        if isinstance(value, bytes):
            try:
                value = value.decode('utf-8')  # Try UTF-8 decoding
            except UnicodeDecodeError:
                try:
                    value = value.decode('latin-1')  # Try Latin-1 decoding (fallback)
                except UnicodeDecodeError:
                    value = value.hex()  # Convert to HEX string (last resort)

        # Check Try decrypting the value if it's still unreadable
        try:
            decrypted_value = searchPatientWithName(value)  # Call your project's decryption function
            if decrypted_value and isinstance(decrypted_value, str):
                value = decrypted_value
        except Exception as e:
            print(f"Decryption failed for value: {value}, error: {e}")  # Debugging info

        # Check Ensure only text goes through encoding checks
        if isinstance(value, str):
            value = value.encode("utf-8", errors="ignore").decode("utf-8")  # Allow full Unicode, removing bad characters

            return str(value)  # Convert everything to string for display
keys = EncryptionKey.getKeys()
patients = SearchDB.searchPatientWithName('A', None, None, keys[0], keys[1], True)
ids = []
firstNames = []
middleNames = []
lastNames = []
for patient in patients:
    ids.append(patient[0])
    firstNames.append(patient[1])
    middleNames.append(patient[2])
    lastNames.append(patient[3])
print(ids, firstNames, middleNames, lastNames)
data = {'ID': ids, 'First Name': firstNames, 'Middle Name': middleNames, 'Last Name': lastNames}
df = pd.DataFrame(data)
print(df)

# Ensure this part is OUTSIDE the class
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = DataFrameGUI(df)
    window.show()
    sys.exit(app.exec_())
